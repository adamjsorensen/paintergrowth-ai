
import React, { useEffect, useState } from 'react';
import { formatProposalText } from '@/utils/formatProposalText';
import { Printer } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';

interface PrintableProposalProps {
  proposal: string;
  metadata: {
    clientName?: string;
    jobType?: string;
    status?: string;
  };
  companyProfile?: {
    companyName?: string;
    companyAddress?: string;
    companyServices?: string;
    warranty?: string;
    logo_url?: string;
  };
}

const PrintableProposal: React.FC<PrintableProposalProps> = ({
  proposal,
  metadata,
  companyProfile,
}) => {
  const [coverImageUrl, setCoverImageUrl] = useState<string | null>(null);

  useEffect(() => {
    // If opened in a new window, trigger print automatically
    if (window.opener) {
      window.print();
    }
  }, []);

  useEffect(() => {
    const fetchCoverImage = async () => {
      const { data } = await supabase
        .from('proposal_pdf_settings')
        .select('cover_image_url')
        .single();
      
      setCoverImageUrl(data?.cover_image_url || null);
    };

    fetchCoverImage();
  }, []);

  // Default logo if none provided
  const defaultLogo = "/placeholder.svg";
  const logoUrl = companyProfile?.logo_url || defaultLogo;

  return (
    <div className="min-h-screen bg-white font-sans">
      {/* Print Instructions - Hidden in Print */}
      <div className="p-4 mb-6 bg-blue-50 rounded-lg print:hidden">
        <h2 className="text-lg font-semibold flex items-center gap-2">
          <Printer className="h-5 w-5" />
          Print Instructions
        </h2>
        <p className="mt-2 text-sm text-gray-600">
          To save as PDF:
          <br />
          • Desktop: Select "Save as PDF" in the print dialog
          <br />
          • iOS: Tap the share icon and select "Print" or "Save as PDF"
          <br />
          • Android: Select "Save as PDF" in the print options
        </p>
      </div>

      {/* Proposal Content - Optimized for Print */}
      <div className="max-w-[750px] mx-auto p-8 print:p-6 print:mx-0 print:w-full">
        {/* Cover Image (if available) */}
        {coverImageUrl && (
          <div className="w-full h-64 mb-8 print:mb-6 overflow-hidden rounded-lg">
            <img
              src={coverImageUrl}
              alt="Proposal Cover"
              className="w-full h-full object-cover"
            />
          </div>
        )}

        {/* Cover Page */}
        <div className="pb-10 mb-10 border-b border-gray-200 print:pb-6 print:mb-6">
          {/* Logo */}
          <div className="flex justify-center mb-8">
            <img
              src={logoUrl}
              alt={companyProfile?.companyName || "Company Logo"}
              className="max-h-[100px] w-auto object-contain"
              onError={(e) => {
                const target = e.target as HTMLImageElement;
                target.src = defaultLogo;
              }}
            />
          </div>

          {/* Company Name */}
          {companyProfile?.companyName && (
            <h1 className="text-3xl font-bold text-gray-900 mb-2 text-center print:text-2xl">
              {companyProfile.companyName}
            </h1>
          )}
          
          {/* Company Address */}
          {companyProfile?.companyAddress && (
            <p className="text-gray-600 text-center mb-8 print:mb-6">
              {companyProfile.companyAddress}
            </p>
          )}

          {/* Proposal Title */}
          <div className="mb-8 print:mb-6">
            <h2 className="text-2xl font-semibold mb-2 text-center print:text-xl">
              Proposal for {metadata.clientName || "Client"}
            </h2>
            {metadata.jobType && (
              <p className="text-gray-600 text-center">Project Type: {metadata.jobType}</p>
            )}
            <p className="text-gray-600 text-center mt-1">
              Date: {new Date().toLocaleDateString()}
            </p>
          </div>
        </div>

        {/* Main Content */}
        <div className="prose max-w-none print:prose-sm leading-relaxed">
          {formatProposalText(proposal)}
        </div>

        {/* Footer */}
        <footer className="mt-12 pt-6 border-t border-gray-200 text-sm text-gray-600 print:mt-8">
          <p>Generated by {companyProfile?.companyName || "Company"}</p>
          <p className="mt-1">© {new Date().getFullYear()} All rights reserved.</p>
        </footer>
      </div>
    </div>
  );
};

export default PrintableProposal;
